version: '3.7'

services:

  # Bootstrap node used for discovery; clients connect to this node to discover the ethereum network
  geth-bootnode:
    hostname: geth-bootnode
    env_file:
      - .env
    image: geth-client
    build:
      context: .
      args:
        - INITIAL_ACCOUNT_PASSWORD=${INITIAL_ACCOUNT_PASSWORD}
    # Specify the node key because we want to reference this bootstrap node from other nodes.
    # As this is the bootstrap node, there's no need for doing any discovery (other node will discover this node).
    # Disable IPC as this is the bootstrap node - we don't want to interact with it.
    # The network id needs to be the same for all our nodes.
    # We use our own subnet for the blockchain - we can restrict connections to our subnet.
    command:
      --nodekeyhex="${NODEKEYHEX}"
      --nodiscover
      --ipcdisable
      --networkid=${NETWORK_ID}
      --netrestrict="172.16.254.0/28"
    networks:
      priv-eth-net:

  # This node exposes the ethereum JSON-RPC API via HTTP on port 8545; we use this to interact with the blockchain
  geth-rpc-endpoint:
    hostname: geth-rpc-endpoint
    env_file:
      - .env
    image: geth-client
    depends_on:
      - geth-bootnode
    # We specify the bootstrap node explicitly.
    # Because we want to communicate via JSON-RPC over http, we specify "allow-insecure-unlock" to be able to unlock our account via HTTP; don't do this on production.
    # We enable the HTPP server and the JSON-RPC apis over it.
    # Like the bootstrap server, we restrict network communication to our private subnet.
    command:
      --bootnodes="enode://${ENODE}@geth-bootnode:30303"
      --allow-insecure-unlock
      --http
      --http.addr="0.0.0.0"
      --http.api="eth,web3,net,admin,personal"
      --http.corsdomain="*"
      --networkid=${NETWORK_ID}
      --netrestrict="172.16.254.0/28"
    ports:
      - "8545:8545"
    networks:
      priv-eth-net:

  # This node does some mining, so that transactions that we put on the blockchain actually get included into blocks and get validated
  geth-miner:
    hostname: geth-miner
    env_file:
      - .env
    image: geth-client
    depends_on:
      - geth-bootnode
    # We need to specify the bootnode explicitly.
    # We configure this node as a miner with one mining thread.
    # As for the other nodes, we restrict it to our private subnet.
    command:
      --bootnodes="enode://${ENODE}@geth-bootnode:30303"
      --mine
      --miner.threads=1
      --networkid=${NETWORK_ID}
      --netrestrict="172.16.254.0/28"
    networks:
      priv-eth-net:

networks:
  priv-eth-net:
    driver: bridge
    ipam:
      config:
      - subnet: 172.16.254.0/28
